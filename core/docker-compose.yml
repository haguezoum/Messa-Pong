name: 42_transcendence

services:
    nginx:
        image: nginx:reverse-proxy
        container_name: nginx
        build:
            context: ./infrastructure/nginx
        ports:
            - 80:80/tcp
            - 443:443/tcp
        volumes:
          - frontend-files:/www:ro
        networks:
            42network:
                aliases:
                    - nginx
        depends_on:
            redis:
                condition: service_healthy
        security_opt:
            - no-new-privileges:true
        cap_drop:
            - ALL
        cap_add:
            - NET_BIND_SERVICE
        restart: always
    
    frontend:
        image: frontend:builder
        container_name: frontend
        build:
            context: ./frontend
        volumes:
            - frontend-files:/www:cached
        networks:
            42network:
                aliases:
                    - frontend
        depends_on:
            - rest_api
                # condition: service_healthy
        deploy:
            resources:
                limits:
                    cpus: '0.50'
                    memory: 256M
                reservations:
                    cpus: '0.25'
                    memory: 128M
        restart: always

    database:
        image: postgresql:database
        container_name: database
        build:
            context: ./infrastructure/postgres
        volumes:
            - database-data:/var/lib/postgresql/data
        networks:
            42network:
                aliases:
                    - database
                    - postgresql
        secrets:
            - database-credentials
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
            interval: 15s
            timeout: 10s
            retries: 5
            start_period: 50s
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"
        restart: always

    redis:
        image: redis:cache
        container_name: redis
        build:
            context: ./infrastructure/redis
        networks:
            42network:
                aliases:
                    - redis
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        depends_on:
            database:
                condition: service_healthy
        restart: always

    # game:
    #     image: game:server
    #     container_name: game
    #     build:
    #         context: ./game
    #     networks:
    #         42network:
    #             aliases:
    #                 - game
    #     depends_on:
    #         redis:
    #             condition: service_healthy
    #     healthcheck:
    #         test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
    #         interval: 30s
    #         timeout: 10s
    #         retries: 3
    #         start_period: 30s
    #     restart: always

    # chat:
    #     image: chat:messenger
    #     container_name: chat
    #     build:
    #         context: ./chat
    #     networks:
    #         42network:
    #             aliases:
    #                 - chat
    #     secrets:
    #         - database-credentials
    #     environment:
    #         - DJANGO_SETTINGS_MODULE=chat.settings
    #         - PG_HOST=database
    #         - PG_PORT=5432
    #     depends_on:
    #         database:
    #             condition: service_healthy
    #         redis:
    #             condition: service_healthy
    #     healthcheck:
    #         test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
    #         interval: 30s
    #         timeout: 10s
    #         retries: 3
    #         start_period: 30s
    #     restart: always

    rest_api:
        image: restapi:server
        container_name: rest_api
        build:
            context: ./rest_api
        networks:
            42network:
              aliases:
                  - oauth
                  - api_gateway
        secrets:
            - api-credentials
            - database-credentials
        depends_on:
            database:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 256M
        # healthcheck:
        #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
        #     interval: 5s
        #     timeout: 2s
        #     retries: 3
        #     start_period: 10s
        restart: always


volumes:
    database-data:
        name: database-data
    frontend-files:
        name: frontend-files


networks:
    42network:
        name: 42network
        driver: bridge
        driver_opts:
            com.docker.network.driver.mtu: 1450


secrets:
    database-credentials:
        file: ../secrets/database-credentials.env
    api-credentials:
        file: ../secrets/api-credentials.env
