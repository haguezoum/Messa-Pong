name: 42_transcendence

services:
    nginx:
        image: nginx:reverse-proxy
        container_name: nginx
        build:
            context: ./infrastructure/nginx
        ports:
            - 80:80/tcp
            - 443:443/tcp
        volumes:
          - frontend-files:/www:ro
        networks:
            42network:
                aliases:
                    - nginx
        depends_on:
            redis:
                condition: service_healthy
        restart: always

    frontend:
        image: frontend:builder
        container_name: frontend
        build:
            context: ./frontend
        volumes:
            - frontend-files:/www:cached
        networks:
            42network:
                aliases:
                    - frontend
        restart: always

    database:
        image: postgresql:database
        container_name: database
        build:
            context: ./infrastructure/postgres
        volumes:
            - database-data:/var/lib/postgresql/data
        networks:
            42network:
                aliases:
                    - database
                    - postgresql
        secrets:
            - database-credentials
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
            interval: 15s
            timeout: 10s
            retries: 5
            start_period: 50s
        restart: always

    redis:
        image: redis:cache
        container_name: redis
        build:
            context: ./infrastructure/redis
        networks:
            42network:
                aliases:
                    - redis
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 2s
            retries: 3
            start_period: 10s
        depends_on:
            database:
                condition: service_healthy
        restart: always

    # game:
    #     image: game:server
    #     container_name: game
    #     build:
    #         context: ./game
    #     networks:
    #         42network:
    #             aliases:
    #                 - game
    #     depends_on:
    #         redis:
    #             condition: service_healthy
    #     restart: always

    # chat:
    #     image: chat:messenger
    #     container_name: chat
    #     build:
    #         context: ./chat
    #     networks:
    #         42network:
    #             aliases:
    #                 - chat
    #     depends_on:
    #         redis:
    #             condition: service_healthy
    #     restart: always

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
        container_name: elasticsearch
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=true
            - xpack.security.authc.api_key.enabled=true
            - ELASTIC_PASSWORD_FILE=/run/secrets/elk-credentials
        volumes:
            - elk-data:/var/lib/elasticsearch
            - ./infrastructure/elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
        networks:
            42network:
                aliases:
                    - elasticsearch
        secrets:
            - elk-credentials
        healthcheck:
            test: ["CMD-SHELL", "curl -sS http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s
        deploy:
            resources:
                limits:
                    memory: 512M
        restart: always

    logstash:
        image: docker.elastic.co/logstash/logstash:8.7.1
        container_name: logstash
        volumes:
            - ./infrastructure/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
            - ./infrastructure/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
        networks:
            42network:
                aliases:
                    - logstash
        depends_on:
            elasticsearch:
                condition: service_healthy
        environment:
            - LS_JAVA_OPTS=-Xms256m -Xmx256m
            - LOGSTASH_PASSWORD_FILE=/run/secrets/elk-credentials
        secrets:
            - elk-credentials
        command: >
            sh -c "
              export LOGSTASH_ELASTIC_PASSWORD=$(cat /run/secrets/elk-credentials);
              exec logstash -f /usr/share/logstash/pipeline
            "
        deploy:
            resources:
                limits:
                    memory: 256M
        restart: always

    kibana:
        image: docker.elastic.co/kibana/kibana:8.7.1
        container_name: kibana
        ports:
            - 5601:5601/tcp
        networks:
            42network:
                aliases:
                    - kibana
        depends_on:
            elasticsearch:
                condition: service_healthy
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - ELASTICSEARCH_USERNAME=elastic
            - ELASTICSEARCH_PASSWORD_FILE=/run/secrets/elk-credentials
        secrets:
            - elk-credentials
        command: >
            sh -c "
              export ELASTICSEARCH_PASSWORD=$(cat /run/secrets/elk-credentials);
              exec /usr/local/bin/kibana-docker
            "
        deploy:
            resources:
                limits:
                    memory: 512M
        restart: always

    filebeat:
        image: docker.elastic.co/beats/filebeat:8.7.1
        container_name: filebeat
        volumes:
            - /var/lib/docker/containers:/var/lib/docker/containers:ro
            - ./infrastructure/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
        networks:
            42network:
                aliases:
                    - filebeat
        depends_on:
            logstash:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 128M
        restart: always

    # auth:
    #     image: auth:server
    #     container_name: auth
    #     build:
    #         context: ./auth
    #     volumes:
    #         - auth_storage:/storage
    #     networks:
    #         42network:
    #           aliases:
    #               - authentication
    #               - api_gateway
    #     secrets:
    #         - database-credentials
    #         - api-credentials
    #     depends_on:
    #         database:
    #             condition: service_healthy
    #     deploy:
    #         resources:
    #             limits:
    #                 memory: 256M
    #     healthcheck:
    #         test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #         interval: 5s
    #         timeout: 2s
    #         retries: 3
    #         start_period: 10s
    #     restart: always


volumes:
    database-data:
        name: database-data
    frontend-files:
        name: frontend-files
    auth_storage:
        name: auth_storage
    elk-data:
        name: elk-data


networks:
    42network:
        name: 42network
        driver: bridge


secrets:
    database-credentials:
        file: ../secrets/database-credentials.env
    api-credentials:
        file: ../secrets/api-credentials.env
    elk-credentials:
        file: ../secrets/elk-credentials.env
