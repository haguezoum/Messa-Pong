name: 42_transcendence

services:
    nginx:
        image: nginx:reverse-proxy
        container_name: nginx
        build:
            context: ./infrastructure/nginx
        ports:
            - 80:80/tcp
            - 443:443/tcp
        volumes:
          - frontend-files:/www:ro
        networks:
            42network:
                aliases:
                    - nginx
        depends_on:
            redis:
                condition: service_healthy
            elasticsearch:
                condition: service_healthy
        security_opt:
            - no-new-privileges:true
        cap_drop:
            - ALL
        cap_add:
            - NET_BIND_SERVICE
        restart: always

    frontend:
        image: frontend:builder
        container_name: frontend
        build:
            context: ./frontend
        volumes:
            - frontend-files:/www:cached
        networks:
            42network:
                aliases:
                    - frontend
        deploy:
            resources:
                limits:
                    cpus: '0.50'
                    memory: 256M
                reservations:
                    cpus: '0.25'
                    memory: 128M
        restart: always

    database:
        image: postgresql:database
        container_name: database
        build:
            context: ./infrastructure/postgres
        volumes:
            - database-data:/var/lib/postgresql/data
        networks:
            42network:
                aliases:
                    - database
                    - postgresql
        secrets:
            - database-credentials
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
            interval: 15s
            timeout: 10s
            retries: 5
            start_period: 50s
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"
        restart: always

    redis:
        image: redis:cache
        container_name: redis
        build:
            context: ./infrastructure/redis
        networks:
            42network:
                aliases:
                    - redis
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        depends_on:
            database:
                condition: service_healthy
        restart: always

    # game:
    #     image: game:server
    #     container_name: game
    #     build:
    #         context: ./game
    #     networks:
    #         42network:
    #             aliases:
    #                 - game
    #     depends_on:
    #         redis:
    #             condition: service_healthy
    #     healthcheck:
    #         test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
    #         interval: 30s
    #         timeout: 10s
    #         retries: 3
    #         start_period: 30s
    #     restart: always

    # chat:
    #     image: chat:messenger
    #     container_name: chat
    #     build:
    #         context: ./chat
    #     networks:
    #         42network:
    #             aliases:
    #                 - chat
    #     secrets:
    #         - database-credentials
    #     environment:
    #         - DJANGO_SETTINGS_MODULE=chat.settings
    #         - PG_HOST=database
    #         - PG_PORT=5432
    #     depends_on:
    #         database:
    #             condition: service_healthy
    #         redis:
    #             condition: service_healthy
    #     healthcheck:
    #         test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
    #         interval: 30s
    #         timeout: 10s
    #         retries: 3
    #         start_period: 30s
    #     restart: always

    # auth:
    #     image: auth:server
    #     container_name: auth
    #     build:
    #         context: ./auth
    #     volumes:
    #         - auth_storage:/storage
    #     networks:
    #         42network:
    #           aliases:
    #               - authentication
    #               - api_gateway
    #     secrets:
    #         - database-credentials
    #         - api-credentials
    #     depends_on:
    #         database:
    #             condition: service_healthy
    #     deploy:
    #         resources:
    #             limits:
    #                 memory: 256M
    #     healthcheck:
    #         test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #         interval: 5s
    #         timeout: 2s
    #         retries: 3
    #         start_period: 10s
    #     restart: always

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
        container_name: elasticsearch
        environment:
            - discovery.type=single-node
            - ES_JAVA_OPTS=-Xms256m -Xmx256m
            - xpack.security.enabled=true
            - ELASTIC_PASSWORD=Tarzan@1234
            - bootstrap.memory_lock=true
            - cluster.routing.allocation.disk.threshold_enabled=false
            - xpack.security.autoconfigure=true
            - KIBANA_SYSTEM_PASSWORD=KibanaPassword123
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - elk-data:/usr/share/elasticsearch/data:delegated
        networks:
            42network:
                aliases:
                    - elasticsearch
        deploy:
            resources:
                limits:
                    memory: 512M
        healthcheck:
            test: ["CMD", "curl", "-u", "elastic:Tarzan@1234", "-f", "http://localhost:9200"] 
            interval: 15s
            timeout: 5s
            retries: 3
            start_period: 30s
        restart: always

    logstash:
        image: docker.elastic.co/logstash/logstash:8.12.2
        container_name: logstash
        environment:
            - LS_JAVA_OPTS=-Xms128m -Xmx128m
            - pipeline.workers=2
            - pipeline.batch.size=125
        networks:
            42network:
                aliases:
                    - logstash
        depends_on:
            elasticsearch:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 256M
        restart: always

    kibana:
        image: docker.elastic.co/kibana/kibana:8.12.2
        container_name: kibana
        environment:
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=KibanaPassword123
            - SERVER_MAXPAYLOADBYTES=1048576
            - KIBANA_CACHE_ENABLED=true
        networks:
            42network:
                aliases:
                    - kibana
        depends_on:
            elasticsearch:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 256M
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:5601"]
            interval: 15s
            timeout: 5s
            retries: 3
            start_period: 30s
        restart: always

volumes:
    database-data:
        name: database-data
    frontend-files:
        name: frontend-files
    auth_storage:
        name: auth_storage
    elk-data:
        name: elk-data


networks:
    42network:
        name: 42network
        driver: bridge
        driver_opts:
            com.docker.network.driver.mtu: 1450


secrets:
    database-credentials:
        file: ../secrets/database-credentials.env
    api-credentials:
        file: ../secrets/api-credentials.env
    elk-credentials:
        file: ../secrets/elk-credentials.env
