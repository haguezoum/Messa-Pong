name: 42_transcendence

services:
    nginx:
        image: nginx:reverse-proxy
        container_name: nginx
        build:
            context: ./infrastructure/nginx
        ports:
            - 80:80/tcp
            - 443:443/tcp
        volumes:
          - frontend-files:/www:ro
        networks:
            42network:
                aliases:
                    - nginx
        depends_on:
            redis:
                condition: service_healthy
        logging:
            driver: syslog
            options:
                syslog-address: "tcp://elk:5000"
                tag: "nginx"
        restart: always

    frontend:
        image: frontend:builder
        container_name: frontend
        build:
            context: ./frontend
        volumes:
            - frontend-files:/www:cached
        networks:
            42network:
                aliases:
                    - frontend
        logging:
            driver: syslog
            options:
                syslog-address: "tcp://elk:5000"
                tag: "nginx"
        restart: always

    database:
        image: postgresql:database
        container_name: database
        build:
            context: ./infrastructure/postgres
        volumes:
            - database-data:/var/lib/postgresql/data
        networks:
            42network:
                aliases:
                    - database
                    - postgresql
        secrets:
            - database-credentials
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
            interval: 15s
            timeout: 10s
            retries: 5
            start_period: 50s
        logging:
            driver: syslog
            options:
                syslog-address: "tcp://elk:5000"
                tag: "database"
        restart: always

    redis:
        image: redis:cache
        container_name: redis
        build:
            context: ./infrastructure/redis
        networks:
            42network:
                aliases:
                    - redis
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 2s
            retries: 3
            start_period: 10s
        logging:
            driver: syslog
            options:
                syslog-address: "tcp://elk:5000"
                tag: "redis"
        depends_on:
            database:
                condition: service_healthy
        restart: always

    game:
        image: game:server
        container_name: game
        build:
            context: ./game
        networks:
            42network:
                aliases:
                    - game
        depends_on:
            redis:
                condition: service_healthy
        logging:
            driver: syslog
            options:
                syslog-address: "tcp://elk:5000"
                tag: "game"
        restart: always

    chat:
        image: chat:messenger
        container_name: chat
        build:
            context: ./chat
        networks:
            42network:
                aliases:
                    - chat
        depends_on:
            redis:
                condition: service_healthy
        logging:
            driver: syslog
            options:
                syslog-address: "tcp://elk:5000"
                tag: "chat"
        restart: always

    elk: 
        image: docker.elastic.co/elk/elk:latest
        container_name: elk
        ports:
            - 5601:5601/tcp
            - 9200:9200/tcp
            - 5000:5000/tcp
        volumes:
            - elk-data:/var/lib/elasticsearch
        networks:
            42network:
                aliases:
                    - elk
        secrets:
            - elk-credentials
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:9200"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 50s
        restart: always

    auth:
        image: auth:server
        container_name: auth
        build:
            context: ./auth
        volumes:
            - auth_storage:/api/static
            - ./infrastructure/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        network:
            42network:
              aliases:
                  - authentication
                  - api_gateway
        secrets:
            - database-credentials
            - api-credentials
        depends_on:
            database:
                condition: service_healthy
        logging:
            driver: syslog
            options:
                syslog-address: "tcp://elk:5000"
                tag: "auth"
        restart: always


volumes:
    database-data:
    redis-data:
    frontend-files:
    auth_storage:
    elk-data:


networks:
    42network:
        name: 42network
        driver: bridge
        internal: true


secrets:
    database-credentials:
        file: ../secrets/database-credentials.env
    api-credentials:
        file: ../secrets/api-credentials.env
    elk-credentials:
        file: ../secrets/elk-credentials.env
