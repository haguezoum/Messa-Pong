name: 42_transcendence

services:
    nginx:
        image: nginx:reverse-proxy
        container_name: nginx
        build:
            context: ./infrastructure/nginx
        ports:
            - 80:80/tcp
            - 443:443/tcp
        volumes:
            - frontend-files:/www
            - ./infrastructure/nginx/logs:/var/log/nginx
        networks:
            42network:
                aliases:
                    - nginx
        depends_on:
            auth:
                condition: service_healthy
        restart: always

    frontend:
        image: frontend:builder
        container_name: frontend
        build:
            context: ./frontend
        volumes:
            - frontend-files:/www
        networks:
            42network:
                aliases:
                    - frontend
        depends_on:
            database:
                condition: service_healthy
        restart: always

    database:
        image: postgresql:database
        container_name: database
        build:
            context: ./infrastructure/postgres
        environment:
            - POSTGRES_USER=${PG_USER:-postgres}
            - POSTGRES_PASSWORD=${PG_PASSWD:-postgres123}
            - POSTGRES_DB=${PG_NAME:-postgres}
            - PGDATA=/var/lib/postgresql/data
        volumes:
            - database-data:/var/lib/postgresql/data
        networks:
            42network:
                aliases:
                    - database
                    - postgresql
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-postgres} -d ${PG_NAME:-postgres} -h localhost"]
            interval: 5s
            timeout: 3s
            retries: 5
            start_period: 30s
        restart: always

    redis:
        image: redis:cache
        container_name: redis
        build:
            context: ./infrastructure/redis
        ports:
            - 6379:6379/tcp
        networks:
            42network:
                aliases:
                    - redis
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 2s
            retries: 3
            start_period: 10s
        depends_on:
            database:
                condition: service_healthy
        restart: always

    auth:
        image: auth:alpine
        container_name: auth
        build:
            context: ./auth
        ports:
            - "8000:8000"
        volumes:
            - ./auth:/home/app:delegated
            - auth_storage:/home/app/static
        networks:
            42network:
                aliases:
                    - auth
                    - authentication
                    - api_gateway
        environment:
            - DJANGO_SETTINGS_MODULE=restapi.settings
            - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-your-secret-key}
            - PG_NAME=${PG_NAME:-postgres}
            - PG_USER=${PG_USER:-postgres}
            - PG_PASSWD=${PG_PASSWD:-postgres123}
            - PG_HOST=${PG_HOST:-database}
            - PG_PORT=${PG_PORT:-5432}
            - REDIS_URL=redis://redis:6379/0
            - PYTHONPATH=/home/app
            - DEBUG=True
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s
        secrets:
            - database-credentials
            - api-credentials
        depends_on:
            database:
                condition: service_healthy
            redis:
                condition: service_healthy
        restart: always

volumes:
    database-data:
        name: database_volume

    redis-data:
        name: redis_volume

    frontend-files:
        name: frontend_volume
    
    auth_storage:
        name: auth_storage

    elk-data:
        name: elk_volume


networks:
    42network:
        name: 42network
        driver: bridge


secrets:
    database-credentials:
        file: ../secrets/database-credentials.env
    api-credentials:
        file: ../secrets/api-credentials.env
    elk-credentials:
        file: ../secrets/elk-credentials.env
