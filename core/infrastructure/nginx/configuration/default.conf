server {
	# Listen on HTTP port on both IPv4 and IPv6
	listen			80;
	listen			[::]:80;

	# Listen on HTTPS port and use SSL on both IPv4 and IPv6
	listen			443 ssl http2;
	listen			[::]:443 ssl http2;

	server_name		default;

	# Specify the SSL/TLS protocols allowed for HTTPS connections.
	ssl_protocols			TLSv1.2 TLSv1.3;

	# Specify the SSL key and certificate for HTTPS
	ssl_certificate			/etc/nginx/ssl/ssl.crt;
	ssl_certificate_key		/etc/nginx/ssl/ssl.key;

	# Redirect HTTP requests to HTTPS
	if ($scheme != "https") {
		return 301 https://$host$request_uri;
	}

	# Security headers
	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
	add_header X-Content-Type-Options "nosniff" always;
    	add_header X-Frame-Options "SAMEORIGIN" always;
    	add_header X-XSS-Protection "1; mode=block" always;

	# Define the root directory for serving web content.
	root		/www;
	index		index.html;

	# Proxy API requests to the authentication service
	location /api/ {
		proxy_pass http://auth:8000;  # Use the service name from docker-compose
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection 'upgrade';
		proxy_set_header Host $host;
		proxy_cache_bypass $http_upgrade;
		
		# Forward the real client IP and protocol
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-Host $host;
		proxy_set_header X-Forwarded-Port $server_port;

		# Increase timeouts for long-running requests
		proxy_connect_timeout 60s;
		proxy_send_timeout 60s;
		proxy_read_timeout 60s;

		# CORS headers
		add_header 'Access-Control-Allow-Origin' 'https://localhost' always;
		add_header 'Access-Control-Allow-Credentials' 'true' always;
		add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
		add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;

		# Handle preflight requests
		if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' 'https://localhost' always;
			add_header 'Access-Control-Allow-Credentials' 'true' always;
			add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
			add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain charset=UTF-8';
			add_header 'Content-Length' 0;
			return 204;
		}
	}

	# serve matched assets and push for caching
	location /src {
		try_files $uri $uri/ =404;
		expires 30d;
		add_header Cache-Control "public, no-transform";
	}

	# Serve index.html for any location and aggressively prevent caching for it
	location / {
		try_files $uri /public/index.html;
		add_header Cache-Control "no-cache, no-store, must-revalidate";
	}

	# Disable directory listings
	autoindex off;

	# Compression
	gzip on;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
	gzip_min_length 1000;
	gzip_proxied any;

	# Access & Error Logs
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log warn;
}
