name: 42_transcendence
services:
  postgres:
    build:
      context: ./postgres
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - db_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.5"
    restart: always

  auth:
    build:
      context: ./auth
    container_name: auth
    environment:
      AUTH_ENV: ${AUTH_ENV}
    networks:
      - transcendence-network
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.3"
    restart: on-failure

  core:
    build:
      context: ./core
    container_name: API_server
    networks:
      - transcendence-network
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 750m
          cpus: "0.4"
    restart: on-failure

  Chat:
    build:
      context: ./Chat
    container_name: Chat_server
    networks:
      - transcendence-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
    volumes:
      - chat_logs:/var/log/chat
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.5"
    restart: on-failure

  Game:
    build:
      context: ./Game
    container_name: Game_server
    networks:
      - transcendence-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.5"
    restart: on-failure

  UI:
    build:
      context: ./UI
    container_name: frontend
    networks:
      - transcendence-network
    deploy:
      resources:
        limits:
          memory: 750m
          cpus: "0.3"
    restart: on-failure

  nginx:
    build:
      context: ./nginx
    container_name: nginx
    networks:
      - transcendence-network
    depends_on:
      Chat:
        condition: service_healthy
      Game:
        condition: service_healthy
      core:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
    volumes:
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: "0.5"
    restart: always

  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - transcendence-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.2"
    restart: always

  vault:
    image: vault:alpine
    container_name: vault
    networks:
      - transcendence-network
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
      VAULT_API_ADDR: "http://vault:8200"
      VAULT_TOKEN: ${VAULT_TOKEN}
    volumes:
      - vault_data:/vault/file
    command: server -config=/vault/config/vault.hcl
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 750m
          cpus: "0.4"
    restart: always

networks:
  transcendence-network:
    driver: bridge

volumes:
  db_data:
  chat_logs:
  nginx_logs:
  redis_data:
  vault_data:
